#!/usr/bin/env python

#
# Nagios plugin to check if current operating system version is outdated.
#

import sys
import argparse
from datetime import datetime, date, timedelta
import subprocess
import urllib2
import csv
from StringIO import StringIO
import traceback


debianDistroDataUrl = "https://salsa.debian.org/debian/distro-info-data/raw/master/debian.csv"
ubuntuDistroDataUrl = "https://salsa.debian.org/debian/distro-info-data/raw/master/ubuntu.csv"


def checkDebianUbuntu(nagiosOutput, distroDataUrl, eolWarningDays, eolCriticalDays,
    releaseWarningDays, releaseCriticalDays, checkForLTS=False, checkForServer=False):
    """
    Check currently installed Debian (or Ubuntu) release against online data from from distro-info-data package.
    """
    try:
        csvText = urllib2.urlopen(distroDataUrl).read()
    except urllib2.URLError, e:
        extype, ex, tb = sys.exc_info()
        msg = traceback.format_exception_only(extype, ex)[-1].rstrip()
        raise RuntimeError, "error downloading \"%s\": %s" % (distroDataUrl, msg), tb

    currentCodename = subprocess.check_output(["lsb_release", "--codename", "--short"]).rstrip("\n")
    currentReleaseData = None

    csvFp = StringIO(csvText)
    csvReader = csv.DictReader(csvFp)

    for row in csvReader:
        if row["series"] == currentCodename:
            currentReleaseData = row
            break
    else:
        raise RuntimeError("current release '%s' not found in release list" % currentCodename)

    def parseCsvDate(string):
        return datetime.strptime(string, "%Y-%m-%d").date()
    nowDate = date.today()

    # check if there is a newer release available (by continuing to read from CSV buffer):
    newestAnyUpgrade = None
    for row in csvReader:
        if checkForLTS and not(row["version"].endswith(" LTS")):
            continue
        if row["release"] is not None:
            releaseDate = parseCsvDate(row["release"])
            if nowDate >= releaseDate:
                newestAnyUpgrade = row

    if newestAnyUpgrade is not None:
        nagiosOutput.addResult("newer release '%s' (%s) is available" % (newestAnyUpgrade["series"], newestAnyUpgrade["version"]))
        nagiosOutput.addPerfData("release", (nowDate - parseCsvDate(newestAnyUpgrade["release"])).total_seconds(), "s",
                                 releaseWarningDays * 86400.0, releaseCriticalDays * 86400.0, 0.0)

    # check if current release is EOL
    if checkForServer and currentReleaseData.has_key("eol-server") and currentReleaseData["eol-server"] is not None:
        eolDate = parseCsvDate(currentReleaseData["eol-server"])
    elif currentReleaseData["eol"] is not None:
        eolDate = parseCsvDate(currentReleaseData["eol"])
    else:
        eolDate = None
    if eolDate:
        if nowDate > eolDate:
            msg = "release '%s' has been EOL for %d days" % (currentCodename, (nowDate - eolDate).days)
        else:
            msg = "release '%s' will be EOL in %d days" % (currentCodename, (eolDate - nowDate).days)

        nagiosOutput.addResult(msg)
        nagiosOutput.addPerfData("eol", (nowDate - eolDate).total_seconds(), "s",
                                 eolWarningDays * -86400.0, eolCriticalDays * -86400.0)


def coalesce(a, b):
    return b if a is None else a


class NagiosOutput:
    "Class for collecting results and aggregating them into a single status output."
    LEVEL_OK = 0
    LEVEL_WARN = 1
    LEVEL_CRITICAL = 2

    def __init__(self, name, verbose):
        self.name = name
        self.verbose = verbose
        self.level = self.LEVEL_OK
        self.messages = []
        self.perfdata = []
        sys.excepthook = self.handleException

    def handleException(self, exc_type, exc_value, exc_traceback):
        """Handler for any uncaught exception."""
        if self.verbose:
            traceback.print_tb(exc_traceback)
        print "%s UNKNOWN (%s: %s)" % (self.name, exc_type, exc_value)
        sys.exit(3)

    def addResult(self, msg):
        self.messages.append(msg)

    def addPerfData(self, label, value, uom="", warn=None, crit=None, min=None, maks=None):
        if crit is not None and value > crit:
            level = self.LEVEL_CRITICAL
        else:
            level = self.LEVEL_WARN if warn is not None and value > warn else self.LEVEL_OK

        self.level = max(self.level, level)
        self.perfdata.append(("'%s'=%s%s;%s;%s;%s;%s" % (
            label, value, uom, coalesce(warn, ""), coalesce(crit, ""), coalesce(min, ""), coalesce(maks, "")
        )).rstrip(";"))

    def reportAndExit(self):
        result = self.name + " "
        if self.level == self.LEVEL_OK:
            result += "OK"
        elif self.level == self.LEVEL_WARN:
            result += "WARNING"
        elif self.level == self.LEVEL_CRITICAL:
            result += "CRITICAL"
        else:
            raise ValueError("invalid error level '%s'" % level)
        result += " - " + ("; ".join(self.messages))

        if self.perfdata:
            result += " |" + " ".join(self.perfdata)

        print result
        sys.exit(self.level)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Check whether OS release is outdated.")
    parser.add_argument("-v", "--verbose", action="store_true", help="increase output verbosity")
    parser.add_argument("--eolWarningDays", type=int, metavar="DAYS", default=30, help="set WARNING status if less than DAYS until end-of-life")
    parser.add_argument("--eolCriticalDays", type=int, metavar="DAYS", default=7, help="set CRITICAL status if less than DAYS until end-of-life")
    parser.add_argument("--releaseWarningDays", type=int, metavar="DAYS", default=0, help="set WARNING status if new release available for more than DAYS")
    parser.add_argument("--releaseCriticalDays", type=int, metavar="DAYS", default=30, help="set CRITICAL status if new release available for more than DAYS")
    parser.add_argument("--lts", action="store_true", help="[Ubuntu] check only for LTS releases")
    parser.add_argument("--server", action="store_true", help="[Ubuntu] check for server EOL dates")
    args = parser.parse_args()

    nagiosOutput = NagiosOutput("OSRELEASE", args.verbose)
    distro = subprocess.check_output(["lsb_release", "--id", "--short"]).rstrip("\n")
    if distro == "Debian":
        checkDebianUbuntu(nagiosOutput, debianDistroDataUrl, args.eolWarningDays, args.eolCriticalDays, args.releaseWarningDays, args.releaseCriticalDays)
    elif distro == "Ubuntu":
        checkDebianUbuntu(nagiosOutput, ubuntuDistroDataUrl, args.eolWarningDays, args.eolCriticalDays, args.releaseWarningDays, args.releaseCriticalDays, args.lts, args.server)
    else:
        raise NotImplementedError("unknown distribution '%s'" % distro)
    nagiosOutput.reportAndExit()
